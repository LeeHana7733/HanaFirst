<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="baseStats">
	<select id="baseTotalDate" parameterType="hashmap" resultType="hashmap">
		SELECT
			<choose>
				<when test="baseType	 == 'Y'.toString()">
					TO_CHAR(TRUNC(TO_DATE(#{baseDate}) , 'Y')	 ,  'yyyy-mm-dd' ) AS START_DATE,
	   				TO_CHAR(LAST_DAY(ADD_MONTHS(TRUNC(TO_DATE(#{baseDate}) , 'Y') ,'11')) ,  'yyyy-mm-dd') AS END_DATE,
				</when>
				<when test="baseType	 == 'M'.toString()">
					TO_CHAR( TRUNC(TO_DATE ( #{baseDate} ) , 'MONTH')  ,  'yyyy-mm-dd' )  AS START_DATE,
	   				TO_CHAR(LAST_DAY(TRUNC(TO_DATE (#{baseDate}) , 'MONTH'))  ,  'yyyy-mm-dd') AS END_DATE,
				</when>
				<otherwise>
					TO_CHAR(TRUNC (TO_DATE(#{baseDate} ) ,'D'),  'yyyy-mm-dd' )	AS START_DATE,
	   				TO_CHAR(NEXT_DAY(TO_DATE(#{baseDate} ),'토') ,  'yyyy-mm-dd')	AS END_DATE,
				</otherwise>
			</choose>
					TO_CHAR(TO_DATE(#{baseDate}) ,'yyyy-mm-dd' ) TO_DAY
         FROM 	DUAL	
	</select>
	<select id="baseStatsList" parameterType="hashmap" resultType="hashmap">
		WITH TEMP AS
		 (
		 	<choose>
		 		<when test="baseType == 'W'.toString()">
		 			/* 주간 통계 */
		 			<![CDATA[ 
				 	SELECT AMOUNT, LAST_DATE, ROWNUM ROWN
						FROM (SELECT SUM(AMOUNT) AMOUNT, LAST_DATE
										FROM (SELECT GROUP_DATE,
																 SUM(SPD_AMOUNT) AMOUNT,
																 CASE
																	 WHEN GROUP_DATE >= TO_CHAR(SYSDATE, 'YYYY') ||
																				TO_CHAR(SYSDATE + 1, 'IW') THEN
																		TO_CHAR(SYSDATE, 'YYYY-MM-DD')
																	 ELSE
																		TO_CHAR(LAST_DATE, 'YYYY-MM-DD')
																 END LAST_DATE
														FROM (SELECT TO_CHAR(SPD_DATE, 'YYYY') ||
																				 TO_CHAR(SPD_DATE + 1, 'IW') GROUP_DATE,
																				 SPD_AMOUNT,
																				 CASE
																					 WHEN TO_CHAR(SPD_DATE, 'D') = '7' THEN
																						SPD_DATE
																					 ELSE
																						NEXT_DAY(SPD_DATE, '토')
																				 END LAST_DATE
																		FROM AC_HISTORY
																	 WHERE 	SPD_DATE <= SYSDATE
																	 AND		SPD_TYPE	= #{spdType}
																	UNION ALL
																	SELECT TO_CHAR(SPD_DATE, 'YYYY') ||
																				 TO_CHAR(SPD_DATE + 1, 'IW') GROUP_DATE,
																				 NVL(SPD_AMOUNT, 0),
																				 CASE
																					 WHEN TO_CHAR(SPD_DATE, 'D') = '7' THEN
																						SPD_DATE
																					 ELSE
																						NEXT_DAY(SPD_DATE, '토')
																				 END LAST_DATE
																		FROM (SELECT CASE
																									 WHEN (SELECT		COUNT(SPD_DATE)
																												FROM		AC_HISTORY
																												WHERE	SPD_DATE = SYSDATE
																												AND		SPD_TYPE	= #{spdType} ) = 0 THEN
																										TO_DATE(SYSDATE, 'YY-MM-DD')
																									 ELSE
																										(	SELECT 	SPD_DATE
																											FROM 	AC_HISTORY
																											WHERE 	SPD_DATE = SYSDATE
																											AND		SPD_TYPE	= #{spdType} )
																								 END SPD_DATE,
																								 CASE
																									 WHEN (	SELECT 	COUNT(SPD_DATE)
																												FROM 	AC_HISTORY
																												WHERE 	SPD_DATE = SYSDATE
																												AND		SPD_TYPE	= #{spdType} ) = 0 THEN
																										0
																									 ELSE
																										(	SELECT 	SPD_AMOUNT
																											FROM 	AC_HISTORY
																											WHERE 	SPD_DATE = SYSDATE
																											AND		SPD_TYPE	= #{spdType})
																								 END SPD_AMOUNT
																						FROM DUAL))
													 GROUP BY GROUP_DATE, LAST_DATE
													 ORDER BY LAST_DATE DESC)
									 GROUP BY LAST_DATE
									 ORDER BY LAST_DATE DESC)
						]]>
		 		</when>
		 		<when test="baseType== 'M'.toString()">
	 			/* 월별 쿼리 */			 
		 		<![CDATA[ 
					SELECT 	AMOUNT,
								LAST_DATE,
								ROWNUM ROWN
					FROM 	(	SELECT	SUM(SPD_AMOUNT) AMOUNT,
												CASE
													WHEN SPD_DATE > SYSDATE 
														THEN
															TO_CHAR(SYSDATE, 'YYYY-MM-DD')
														ELSE
															TO_CHAR(SPD_DATE, 'YYYY-MM-DD')
												END LAST_DATE
									 FROM	(	SELECT 	LAST_DAY(SPD_DATE) SPD_DATE,
									 							SPD_AMOUNT
													FROM 	AC_HISTORY
													WHERE 	SPD_DATE <= SYSDATE
													AND		SPD_TYPE	= #{spdType}
												)
									GROUP BY	SPD_DATE
									ORDER BY	LAST_DATE DESC
								)
					]]>
		 		</when>
		 		<otherwise>
		 			/* 연별 쿼리 */			
		 			<![CDATA[ 
					SELECT 	AMOUNT, LAST_DATE, ROWNUM ROWN
					FROM 	(	SELECT 	AMOUNT,
									 			CASE
													WHEN LAST_DATE > SYSDATE
														THEN
															TO_CHAR(SYSDATE, 'YYYY-MM-DD')
											 			ELSE
															TO_CHAR(LAST_DATE, 'YYYY-MM-DD')
									 			END LAST_DATE
									FROM 	(	SELECT	LAST_DATE,
																SUM(SPD_AMOUNT) AMOUNT
													FROM 	(	SELECT	LAST_DAY(ADD_MONTHS(TO_DATE(TO_CHAR(SPD_DATE,'YYYY'),'YY'),'11')) LAST_DATE,
																		 		SPD_AMOUNT
																	FROM 	AC_HISTORY
															 		WHERE 	SPD_DATE <= SYSDATE
															 		AND		SPD_TYPE	= #{spdType}
															 	)
											 		GROUP BY A
											 	)
								 	ORDER BY LAST_DATE DESC
								 )
					]]>
		 		</otherwise>
		 	</choose>
		)
		SELECT 	TRIM(TO_CHAR(AMOUNT , '999,999,999,999,999,999,999,999')) || '원' AS AMOUNT,
					LAST_DATE,
					TRIM(TO_CHAR(CEIL(
										(
											(SELECT SUM(AMOUNT)
											FROM TEMP A
											<choose>
			 									<when test="baseType != 'Y'.toString()">
			 										/* 주간, 월간 일경우 12주, 12달 평균 */
			 										<![CDATA[ 
													WHERE 	A.ROWN < TEMP.ROWN + 12
													AND 		A.ROWN > TEMP.ROWN - 1) / 12)
											 		]]>
			 									</when>
			 									<otherwise>
			 										<![CDATA[
													WHERE	A.ROWN < TEMP.ROWN + 3
													AND		A.ROWN > TEMP.ROWN - 1) / 3)
													]]>
			 									</otherwise>
			 								</choose>
			 								) , '999,999,999,999,999,999,999,999')) || '원' AS AMOUNT_AVG
		FROM TEMP
	</select>
</mapper>